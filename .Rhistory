thedata <- killerwhales
ndata <- nrow(thedata)
Nt <- thedata[-ndata]
Ntplus1 <- thedata[-1]
plot(Nt, Ntplus1,
type ="p",
pch = 21,
bg = "black",
xlab = expression("N"["t"]),
ylab = expression("N"["t+1"]),
xlim =c(0,105),
ylim = c(0,105),
las =1,
yaxs = "i",
xaxs = "i")
Nt <- thedata[-ndata]
Ntplus1 <- thedata[-1]
plot(Nt, Ntplus1,
type ="p",
pch = 21,
bg = "black",
xlab = expression("N"["t"]),
ylab = expression("N"["t+1"]),
xlim =c(0,105),
ylim = c(0,105),
las =1,
yaxs = "i",
xaxs = "i")
Nt
Nt <- thedata[-ndata,2]
Ntplus1 <- thedata[-1,2]
plot(Nt, Ntplus1,
type ="p",
pch = 21,
bg = "black",
xlab = expression("N"["t"]),
ylab = expression("N"["t+1"]),
xlim =c(0,105),
ylim = c(0,105),
las =1,
yaxs = "i",
xaxs = "i")
data <- thedata
ntplus.one.hat <- n.t * lambda
ntplus.one.obs <- thedata[-1,2]
n.t <- thedata[-ndata,2]
ndata <- nrow(thedata)
n.t <- thedata[-ndata,2]
ntplus.one.hat <- n.t * lambda
ntplus.one.obs <- thedata[-1,2]
fitdi <- function(pars, thedata){
lambda <- pars[1]
ndata <- nrow(thedata)
n.t <- thedata[-ndata,2]
ntplus.one.hat <- n.t * lambda
ntplus.one.obs <- thedata[-1,2]
nll <- -sum(dpois(ntplus.one.obs, ntplus.one.hat, log = T))
return(nll)
}
fit.logistic <- function(pars, thedata){
r <- exp(pars[1])
k <- exp(pars[2])
ndata <- length(thedata)
n.t <- thedata[-ndata,2]
ntplus.one.obs<- thedata[-1, 2]
ntplus.one.hat <- n.t + n.t* r * (1 - n.t / k)
nll <- - sum(dpois(ntplus.one.obs, ntplus.one.hat, log = T))
return(nll)
}
source('~/Dropbox/Desktop/Rcode/quantecol/R/whale_model_select.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/quantecol/R/whale_model_select.R', echo=TRUE)
whale_model_select()
source('~/Dropbox/Desktop/Rcode/quantecol/R/whale_model_select.R', echo=TRUE)
whale_model_select()
plot(Nt, Ntplus1,
type ="p",
pch = 21,
bg = "black",
xlab = expression("N"["t"]),
ylab = expression("N"["t+1"]),
xlim =c(0,105),
ylim = c(0,105),
las =1,
yaxs = "i",
xaxs = "i")
fitdi <- function(pars, thedata){
lambda <- pars[1]
ndata <- nrow(thedata)
n.t <- thedata[-ndata,2]
ntplus.one.hat <- n.t * lambda
ntplus.one.obs <- thedata[-1,2]
nll <- -sum(dpois(ntplus.one.obs, ntplus.one.hat, log = T))
return(nll)
}
fit.logistic <- function(pars, thedata){
r <- exp(pars[1])
k <- exp(pars[2])
ndata <- length(thedata)
n.t <- thedata[-ndata,2]
ntplus.one.obs<- thedata[-1, 2]
ntplus.one.hat <- n.t + n.t* r * (1 - n.t / k)
nll <- - sum(dpois(ntplus.one.obs, ntplus.one.hat, log = T))
return(nll)
}
fit.bh <- function(pars, data) {
alpha <- exp(pars[1])
beta <- exp(pars[2])
ndata <- length(thedata)
n.t <- data[-ndata,1]
n.t <- thedata[-ndata,2]
ntplus.one.obs<- thedata[-1, 2]
ntplus.one.hat <- n.t + n.t* alpha / ( 1 + n.t * beta)
nll <- - sum(dpois(ntplus.one.obs, ntplus.one.hat, log = T))
return(nll)
}
startpars <- 1.002
solve.di <- optim(par = startpars,
fn = fitdi,
data = thedata,
method = "Brent",
lower = 0.5,
upper = 1.1
)
solve.di <- optim(par = startpars,
fn = fitdi,
thedata = thedata,
method = "Brent",
lower = 0.5,
upper = 1.1
)
startpars <- c(log(0.002), 4)
solve.logistic <-  optim(par = startpars,
fn = fit.logistic,
thedata = thedata,
method = "BFGS"
)
# fit a BH model
startpars <- c(log(0.002), log(.01))
solve.bh <-optim(par = startpars,
fn = fit.bh,
thedata = thedata,
method = "BFGS"
)
fit.bh <- function(pars, thedata) {
alpha <- exp(pars[1])
beta <- exp(pars[2])
ndata <- length(thedata)
n.t <- data[-ndata,1]
n.t <- thedata[-ndata,2]
ntplus.one.obs<- thedata[-1, 2]
ntplus.one.hat <- n.t + n.t* alpha / ( 1 + n.t * beta)
nll <- - sum(dpois(ntplus.one.obs, ntplus.one.hat, log = T))
return(nll)
}
startpars <- 1.002
solve.di <- optim(par = startpars,
fn = fitdi,
thedata = thedata,
method = "Brent",
lower = 0.5,
upper = 1.1
)
startpars <- c(log(0.002), 4)
solve.logistic <-  optim(par = startpars,
fn = fit.logistic,
thedata = thedata,
method = "BFGS"
)
# fit a BH model
startpars <- c(log(0.002), log(.01))
solve.bh <-optim(par = startpars,
fn = fit.bh,
thedata = thedata,
method = "BFGS"
)
AICtable <- matrix(NA, nrow = 3, ncol = 3)
rownames(AICtable) <- c("Density independent", "Logistic", "Beverton-Holt")
colnames(AICtable) <- c("NLL", "AIC", "Delta AIC")
AICtable[,1] <- c(solve.di$value, solve.logistic$value, solve.bh$value)
AICtable[,2] <- 2 * AICtable[,1] + 2 * c(1,2,2)
AICtable[,3] <- AICtable[,2] - min(AICtable[,2])
AICtable
fit.logistic <- function(pars, thedata){
r <- exp(pars[1])
k <- exp(pars[2])
ndata <- nrow(thedata)
n.t <- thedata[-ndata,2]
ntplus.one.obs<- thedata[-1, 2]
ntplus.one.hat <- n.t + n.t* r * (1 - n.t / k)
nll <- - sum(dpois(ntplus.one.obs, ntplus.one.hat, log = T))
return(nll)
}
fit.bh <- function(pars, thedata) {
alpha <- exp(pars[1])
beta <- exp(pars[2])
ndata <- nrow(thedata)
n.t <- data[-ndata,1]
n.t <- thedata[-ndata,2]
ntplus.one.obs<- thedata[-1, 2]
ntplus.one.hat <- n.t + n.t* alpha / ( 1 + n.t * beta)
nll <- - sum(dpois(ntplus.one.obs, ntplus.one.hat, log = T))
return(nll)
}
startpars <- 1.002
solve.di <- optim(par = startpars,
fn = fitdi,
thedata = thedata,
method = "Brent",
lower = 0.5,
upper = 1.1
)
startpars <- c(log(0.002), 4)
solve.logistic <-  optim(par = startpars,
fn = fit.logistic,
thedata = thedata,
method = "BFGS"
)
# fit a BH model
startpars <- c(log(0.002), log(.01))
solve.bh <-optim(par = startpars,
fn = fit.bh,
thedata = thedata,
method = "BFGS"
)
AICtable <- matrix(NA, nrow = 3, ncol = 3)
rownames(AICtable) <- c("Density independent", "Logistic", "Beverton-Holt")
colnames(AICtable) <- c("NLL", "AIC", "Delta AIC")
AICtable[,1] <- c(solve.di$value, solve.logistic$value, solve.bh$value)
AICtable[,2] <- 2 * AICtable[,1] + 2 * c(1,2,2)
AICtable[,3] <- AICtable[,2] - min(AICtable[,2])
AICtab le
AICtable
library(quantecol)
whale_model_select()
library(quantecol)
whale_model_select()
source('~/Dropbox/Desktop/Rcode/quantecol/R/whale_model_select.R', echo=TRUE)
whale_model_select()
source('~/Dropbox/Desktop/Rcode/quantecol/R/whaleModelSelect.R', echo=TRUE)
library(quantecol)
whaleModelSelect()
print(whaleModelSelect)
thedata <- songsparrows
nll.fun <- function(par, n.female, n.offspring) {
alpha <- par[1]
beta <- par[2]
expected.ofspring <- n.female *  alpha * exp(-beta * n.init)
return(-sum(dpois(x = n.offspring,
mean = expected.offspring,
log = T)))
}
fit.ricker <- function(par, n.female, n.offspring) {
alpha <- par[1]
beta <- par[2]
expected.ofspring <- n.female *  alpha * exp(-beta * n.init)
return(-sum(dpois(x = n.offspring,
mean = expected.offspring,
log = T)))
}
start.par <- c(5, 0.01)
fit <- optim(par = start.par,
fn = fit.ricker,
n.female = n.female,
n.offspring = n.offspring,
method = "Nelder-Mead")
n.female <- songsparrows$Females
n.offspring <- songsparrows$IndependentOffspring
fit.ricker <- function(par, n.female, n.offspring) {
alpha <- par[1]
beta <- par[2]
expected.ofspring <- n.female *  alpha * exp(-beta * n.init)
return(-sum(dpois(x = n.offspring,
mean = expected.offspring,
log = T)))
}
start.par <- c(5, 0.01)
fit <- optim(par = start.par,
fn = fit.ricker,
n.female = n.female,
n.offspring = n.offspring,
method = "Nelder-Mead")
fit.ricker <- function(par, n.female, n.offspring) {
alpha <- par[1]
beta <- par[2]
expected.ofspring <- n.female *  alpha * exp(-beta * n.female)
return(-sum(dpois(x = n.offspring,
mean = expected.offspring,
log = T)))
}
start.par <- c(5, 0.01)
fit <- optim(par = start.par,
fn = fit.ricker,
n.female = n.female,
n.offspring = n.offspring,
method = "Nelder-Mead")
help(dpois)
fit.ricker <- function(par, n.female, n.offspring) {
alpha <- par[1]
beta <- par[2]
expected.ofspring <- n.female *  alpha * exp(-beta * n.female)
return(-sum(dpois(x = n.offspring,
lambda = expected.offspring,
log = T)))
}
start.par <- c(5, 0.01)
fit <- optim(par = start.par,
fn = fit.ricker,
n.female = n.female,
n.offspring = n.offspring,
method = "Nelder-Mead")
fit.ricker <- function(par, n.female, n.offspring) {
alpha <- par[1]
beta <- par[2]
expected.ofspring <- n.female *  alpha * exp(-beta * n.female)
nll <- -sum(dpois(x = n.offspring,
lambda = expected.offspring,
log = T))
return(nll)
}
start.par <- c(5, 0.01)
fit <- optim(par = start.par,
fn = fit.ricker,
n.female = n.female,
n.offspring = n.offspring,
method = "Nelder-Mead")
fit.ricker <- function(par, n.female, n.offspring) {
alpha <- par[1]
beta <- par[2]
expected.offspring <- n.female *  alpha * exp(-beta * n.female)
nll <- -sum(dpois(x = n.offspring,
lambda = expected.offspring,
log = T))
return(nll)
}
start.par <- c(5, 0.01)
fit <- optim(par = start.par,
fn = fit.ricker,
n.female = n.female,
n.offspring = n.offspring,
method = "Nelder-Mead")
fit
fit.di <- function(par, n.female, n.offspring) {
alpha <- par[1]
expected.offspring <- n.female *  alpha
nll <- -sum(dpois(x = n.offspring,
lambda = expected.offspring,
log = T))
return(nll)
}
help(dnbinom)
solve.di <- optim(par = start.par,
fn = fit.di,
n.female = n.female,
n.offspring = n.offspring,
method = "Nelder-Mead")
solve.di
start.par <- 5
fit.di <- function(par, n.female, n.offspring) {
alpha <- par[1]
expected.offspring <- n.female *  alpha
nll <- -sum(dpois(x = n.offspring,
lambda = expected.offspring,
log = T))
return(nll)
}
solve.di <- optim(par = start.par,
fn = fit.di,
n.female = n.female,
n.offspring = n.offspring,
method = "Nelder-Mead")
solve.di <- optim(par = start.par,
fn = fit.di,
n.female = n.female,
n.offspring = n.offspring,
method = "Brent")
solve.di <- optim(par = start.par,
fn = fit.di,
n.female = n.female,
n.offspring = n.offspring,
method = "Brent",
lower = 1,
upper = 20)
solve.di
start.par <- c(5, 0.01)
solve.ricker <- optim(par = start.par,
fn = fit.ricker,
n.female = n.female,
n.offspring = n.offspring,
method = "Nelder-Mead")
# Plot the data
plot(n.female, n.offspring,
type = "p",
pch = 21,
bg = "black",
xlab = expression(paste("N"[0])),
ylab = expression(paste("N"["survive"])),
xlim = c(0, 90),
ylim = c(0, 20),
xaxs = "i",
yaxs = "i",
las = 1)
# plot best fit
n.female.list <- 0:80
# plot best fit
n.female.list <- 0:80
alpha.mle <- solve.ricker$par[1]
beta.mle <- solve.ricker$par[2]
n.hat <- alpha.mle * n.female.list * exp(-beta.mle * n.init.list)
n.hat <- alpha.mle * n.female.list * exp(-beta.mle * n.female.list)
lines(n.init.list, n.hat,
lwd = 3)
lines(n.female.list, n.hat,
lwd = 3)
# Plot the data
plot(n.female, n.offspring,
type = "p",
pch = 21,
bg = "black",
xlab = "Number of Females",
ylab = "Number of independent offspring",
xlim = c(0, 750),
ylim = c(0, 170),
xaxs = "i",
yaxs = "i",
las = 1)
# Plot the data
plot(n.female, n.offspring,
type = "p",
pch = 21,
bg = "black",
xlab = "Number of Females",
ylab = "Number of independent offspring",
xlim = c(0, 75),
ylim = c(0, 170),
xaxs = "i",
yaxs = "i",
las = 1)
# plot best fit
n.female.list <- 0:80
alpha.mle <- solve.ricker$par[1]
beta.mle <- solve.ricker$par[2]
n.hat <- alpha.mle * n.female.list * exp(-beta.mle * n.female.list)
lines(n.female.list, n.hat,
lwd = 3)
colnames(AIC.poisson) <- c("NLL", "AIC", "delta AIC")
rownames <- c("density independent", "Ricker"))
AIC.poisson <- matrix(NA, nrow = 3, ncol = 2)
colnames(AIC.poisson) <- c("NLL", "AIC", "delta AIC")
rownames(AIC.poisson) <- c("density independent", "Ricker"))
rownames(AIC.poisson) <- c("density independent", "Ricker")
AIC.poisson <- matrix(NA, nrow = 2, ncol = 3)
colnames(AIC.poisson) <- c("NLL", "AIC", "delta AIC")
rownames(AIC.poisson) <- c("density independent", "Ricker")
AIC.possion[,1] <- c(solve.di$value, solve.ricker$value)
AIC.poisson[,1] <- c(solve.di$value, solve.ricker$value)
pmf ="poisson"
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
AIC.table
AIC.table[,3] <- AIC.table[,2] - min(AIC.table[,2])
AIC.table
pmf = "nbinom"
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
AIC.table
AIC.table[,1] <- c(di.fit$value,dd.fit$value)
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
AIC.table
di.fit$value
dd.fit
solve.ricker <- optim(par = start.par,
fn = fit.ricker.nb,
n.female = n.female,
n.offspring = n.offspring,
method = "Nelder-Mead")
di.fit <- solve.di
dd.fit <- solve.ricker
dd.fit
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
AIC.table
help(stop)
pmf <- tolower(pmf)
if(!pmf %in% c("poisson", "nbinom")) stop("function input 'pmf' must be either 'poisson' or 'nbinom'")
pmf = "blue)
if(!pmf %in% c("poisson", "nbinom")) stop("function input 'pmf' must be either 'poisson' or 'nbinom'")
(!pmf %in% c("poisson", "nbinom"))
(!pmf %in% c("poisson", "nbinom"))
pmf
pmf <- "blue")
(!pmf %in% c("poisson", "nbinom"))
pmf <- "blue"
(!pmf %in% c("poisson", "nbinom"))
if(!pmf %in% c("poisson", "nbinom")) stop("function input pmf must be either poisson or nbinom")
if(!pmf %in% c("poisson", "nbinom")) stop("function input 'pmf' must be either 'poisson' or 'nbinom'")
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
fit9.4()
fit9.4("nbinom")
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
library(quantecol)
help(fig9.4)
help(fig9.4)
library(quantecol)
help(fig9.4)
fig8.5_6()
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig8.5_6.R', echo=TRUE)
fig8.5_6()
library(quantecol)
help(quantecol)
fig2.11()
fig2.11(r = 0.8)
fig2.11(r = 1.8)
fig2.11(r = 2.8)
library(quantecol)
