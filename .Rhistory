lwd = 2,
col = cols,
xlab = "Year",
ylab = "Abundance",
las = 1)
par(xpd = NA)
legend(x = 21, y = 200, legend = c("Age-1", "Age-2", "Age-3", "Age-4", "Age-5"), lty = "solid",
lwd = 2, col = cols, border = "black", cex = 0.8)
text(x = 2.5, y = 210, labels = "Not stable")
text(x = 15, y = 300, labels = "Stable")
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
plotfilename = "R/graphics/agestructure.pdf"
pdf(file = plotfilename,
height = 4,
width = 5)
library(viridis)
cols <- viridis(n=5)
par(mar=c(4,4,1,5))
matplot(years, output[,1:5],
type = "l",
lty = "solid",
lwd = 2,
col = cols,
xlab = "Year",
ylab = "Abundance",
las = 1)
par(xpd = NA)
legend(x = 21, y = 200, legend = c("Age-1", "Age-2", "Age-3", "Age-4", "Age-5"), lty = "solid",
lwd = 2, col = cols, border = "black", cex = 0.8)
text(x = 2.5, y = 210, labels = "Not stable")
text(x = 15, y = 300, labels = "Stable")
dev.off()
plotfilename = "R/graphics/agestructure.pdf"
pdf(file = plotfilename,
height = 4,
width = 5)
library(viridis)
cols <- viridis(n=5)
par(mar=c(4,4,1,5))
matplot(years, output[,1:5],
type = "l",
lty = "solid",
lwd = 2,
col = cols,
xlab = "Year",
ylab = "Abundance",
las = 1)
par(xpd = NA)
legend(x = 21, y = 200, legend = c("Age-1", "Age-2", "Age-3", "Age-4", "Age-5"), lty = "solid",
lwd = 2, col = cols, border = "black", cex = 0.8)
text(x = 2.5, y = 210, labels = "Transient")
text(x = 15, y = 300, labels = "Stable")
dev.off()
source('~/Dropbox/Desktop/Rcode/quantecol/R/multi_variable_stability_analysis/make predation isoclines.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/quantecol/R/multi_variable_stability_analysis/make predation isoclines.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
output <- rep(NA, times = 100)
output[1] = n.start
n.loops <- length(output)
for (i in 2:n.loops) output[i] <- output[i-1] * r + output[i-1] - catch
lines(output, r* output,
lwd = 1.5,
col = "black")
source('~/.active-rstudio-document', echo=TRUE)
points(output, rep(0, n.loops),
pch = 21,
bg = "black")
lines(output, rep(0, n.loops),
col = "black")
source('~/.active-rstudio-document', echo=TRUE)
library(viridis)
cols <- plasma(100)
points(output, rep(0, n.loops),
pch = 21,
bg = cols)
cols
points(output, rep(0, n.loops),
pch = 21,
bg = cols)
points(output, rep(25, n.loops),
pch = 21,
bg = cols)
par(xpd = NA)
points(output, rep(25, n.loops),
pch = 21,
bg = cols)
source('~/.active-rstudio-document', echo=TRUE)
points(output, rep(21, n.loops),
pch = 21,
bg = cols)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
help(rev)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
output
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
length(output)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
shiny::runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/Ttest')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
library(shiny)
library(shinyjs)
library(shinyalert)
ui <- fluidpage(
title = "Computer Simulation of Fishing",
sidebarLayout(
sidebarPanel(
radioButtons("prodtype", "Production Type",
c("Constant Production Rate (%)" =  "const",
"Compensatory Production Rate (%)" = "compensatory")
),
sidebarPanel(
numericInput("catch", "Catch Level:", 10),
numericInput("n.start", "Starting Population Size:", 45)
)),
mainPanel(
plotOutput(outputId = "simplot"),
)
))
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/pvalue')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
help(legend)
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
help(legend)
legend(x = 105, y = 15, legend=c("Initial Population size", "Year 10 Population Size", "Year 20 population Size"), pch = 21,
pt.bg = cols)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
help(legend)
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
help(legend)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
cols
length(cols)
source('~/Dropbox/Desktop/Rcode/FSH 323/Fishing_Demo_test.R', echo=TRUE)
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
runApp('~/Dropbox/Desktop/Rcode/ShinyDemo/FishingDemo')
source('~/.active-rstudio-document', echo=TRUE)
help(expression)
y.text <- expression(paste0(pi,"(p)"))
plot(plist, dplist,
type = "l",
lwd = 2,
xlab = "p",
ylab = y.text,
xlim = c(0,1),
xaxs = "i",
ylim = c(0, 5,1),
yaxs = "i")
plist <- seq(0.001, 0.999, length.out = 100)
dplist <- dbeta(plist, shape1= alpha, shape2= beta, log = F)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# repeat, instead use Center for Whale Research
cwwdata <- read.csv(file = "R/stochastic population models/cww_killerwhale.csv", header = T)
getwd()
# repeat, instead use Center for Whale Research
cwwdata <- read.csv(file = "R/stochastic_population_models/cww_killerwhale.csv", header = T)
# make comparable to before, up to 2017:
#cwwdata <- cwwdata[1:43,]
year.list <- cwwdata[,1]
alive <- cwwdata[,2]
plotfilename <- "R/stochastic population models/killerwhales.pdf"
mu <- mean(rt)
sigma <- sd(rt)
se <- sigma / (length(rt))^(.5)
rt <- log(alive[-1]/alive[-length(alive)])
mu <- mean(rt)
sigma <- sd(rt)
se <- sigma / (length(rt))^(.5)
se
sigma
help(pdf)
source('~/Dropbox/Desktop/Rcode/quantecol/R/Chapter02_PopulationModels/simple density independent.R', echo=TRUE)
Arial <- Type1Font(family = "Arial",
metrics = c("ArialMT.afm",
"arial-BoldMT.afm",
"Arial-ItalicMT.afm",
"Arial-BoldItalicMT.afm"))
source('~/Dropbox/Desktop/Rcode/quantecol/R/Chapter02_PopulationModels/simple density independent.R', echo=TRUE)
pdfFonts(Arial = Arial)
source('~/Dropbox/Desktop/Rcode/quantecol/R/Chapter02_PopulationModels/simple density independent.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/quantecol/R/Chapter02_PopulationModels/simple density independent.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/quantecol/R/Chapter02_PopulationModels/plot density independent.R', echo=TRUE)
killerwhales <- read.csv(file = "stochastic_population_models/cww_killerwhale.csv", header = T)
killerwhales <- read.csv(file = "R/stochastic_population_models/cww_killerwhale.csv", header = T)
save(killerwhales, file = "data/killerwhales.rda")
library(roxygen2)
killerwhales
help(roxygen)
??roxygen2
source('~/Dropbox/Desktop/Rcode/quantecol/R/data-killerwhales.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/quantecol/R/data-killerwhales.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/quantecol/R/data-killerwhales.R', echo=TRUE)
library(quantecol)
killerwhales
load("~/Dropbox/Desktop/Rcode/quantecol/data/wa_wolf.rda")
wa_wolf
library(quantecol)
help(quantecol)
??quantecol
help(killerwhales)
n.init <- c(6,
10,
12,
20,
29,
43,
59,
91,
22,
25,
8,
12,
15,
42,
68)
n.final <- c(4,
4,
4,
7,
9,
8,
18,
11,
9,
8,
3,
7,
5,
17,
16)
gobies <- as.dataframe(cbind(n.init, n.final))
gobies <- dataframe(cbind(n.init, n.final))
gobies <- data.frame(cbind(n.init, n.final))
names(gobies) <- c("initial_number", "final_number")
save(gobies, file = "data/gobies.rda")
gobies
library(quantecol)
gobies
help(gobies)
load("data/songsparrow.rda")
load("data/songsparrows.rda")
songsparrows
songsparrows$Year <- 1975:1986
songsparrows
songsparrows <- songsparrows[,c(3,1,2)]
songsparrows
save(songsparrows, file = "data/songsparrows/rda")
save(songsparrows, file = "data/songsparrows/rda")
getwd()
save(songsparrows, file = "data/songsparrows.rda")
library(quantecol)
help(songsparrows)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
save.image("~/Dropbox/Desktop/Rcode/quantecol/fig2.6_7.RData")
library(roxygen2)
library(quantecol)
r=2.7
K=100
n.years<-25
n.steps <- 25 # the last number of iterations to show,
nstart <- 20
# run  model
output <- rep(NA, times = n.years)
output[1] <- nstart
for (i in 2:n.years) {
nt <- output[i-1]
ntplus1 <-nt + r * nt * (1 - nt /K)
output[i] <- ntplus1
}
# make logistic plot plus replacement line
r=2.7
K=100
n.years<-25
n.steps <- 25 # the last number of iterations to show,
nstart <- 20
# run  model
output <- rep(NA, times = n.years)
output[1] <- nstart
for (i in 2:n.years) {
nt <- output[i-1]
ntplus1 <-nt + r * nt * (1 - nt /K)
output[i] <- ntplus1
}
par(las = 1, mar = c(5, 1, 5, 1))
layout(matrix(c(1,1,2),nrow = 1, ncol=3))
modelpars = list(r = r, K = K)
plot_cobweb(modeloutput, modelpars, "logistic")
r=2.7
K=100
n.years<-25
n.steps <- 25 # the last number of iterations to show,
nstart <- 20
# run  model
output <- rep(NA, times = n.years)
output[1] <- nstart
for (i in 2:n.years) {
nt <- output[i-1]
ntplus1 <-nt + r * nt * (1 - nt /K)
output[i] <- ntplus1
}
output
par(las = 1, mar = c(5, 1, 5, 1))
layout(matrix(c(1,1,2),nrow = 1, ncol=3))
modelpars = list(r = r, K = K)
plot_cobweb(modeloutput, modelpars, "logistic")
plot_cobweb(modeloutput, modelpars, modelname = "logistic")
plot_cobweb(modeloutput= output, modelpars, modelname = "logistic")
par(las = 1, mar = c(5, 1, 5, 1), oma = c(1,3,1,1))
layout(matrix(c(1,1,2),nrow = 1, ncol=3))
modelpars = list(r = r, K = K)
plot_cobweb(modeloutput= output, modelpars, modelname = "logistic")
par(las = 1, mar = c(5, 1, 5, 1), oma = c(1,5,1,1))
layout(matrix(c(1,1,2),nrow = 1, ncol=3))
modelpars = list(r = r, K = K)
plot_cobweb(modeloutput= output, modelpars, modelname = "logistic")
par(las = 1, mar = c(5, 2, 5, 1), oma = c(1,5,1,1))
layout(matrix(c(1,1,2),nrow = 1, ncol=3))
modelpars = list(r = r, K = K)
plot_cobweb(modeloutput= output, modelpars, modelname = "logistic")
par(las = 1, mar = c(5, 3, 5, 1), oma = c(1,5,1,1))
layout(matrix(c(1,1,2),nrow = 1, ncol=3))
modelpars = list(r = r, K = K)
plot_cobweb(modeloutput= output, modelpars, modelname = "logistic")
par(las = 1, mar = c(5, 4, 5, 1), oma = c(1,5,1,1))
layout(matrix(c(1,1,2),nrow = 1, ncol=3))
modelpars = list(r = r, K = K)
plot_cobweb(modeloutput= output, modelpars, modelname = "logistic")
source('~/Dropbox/Desktop/Rcode/quantecol/R/plot_cobweb.R', echo=TRUE)
r=2.7
K=100
n.years<-25
n.steps <- 25 # the last number of iterations to show,
nstart <- 20
library(quantecol)
r=2.7
K=100
n.years<-25
n.steps <- 25 # the last number of iterations to show,
nstart <- 20
# run  model
output <- rep(NA, times = n.years)
output[1] <- nstart
for (i in 2:n.years) {
nt <- output[i-1]
ntplus1 <-nt + r * nt * (1 - nt /K)
output[i] <- ntplus1
}
par(las = 1, mar = c(5, 4, 5, 1), oma = c(1,5,1,1))
layout(matrix(c(1,1,2),nrow = 1, ncol=3))
modelpars = list(r = r, K = K)
plot_cobweb(modeloutput= output, modelpars, modelname = "logistic")
par(las = 1, mar = c(5, 3, 5, 1), oma = c(1,5,1,1))
layout(matrix(c(1,1,2),nrow = 1, ncol=3))
modelpars = list(r = r, K = K)
plot_cobweb(modeloutput= output, modelpars, modelname = "logistic")
par(las = 1, mar = c(5, 5, 5, 1), oma = c(1,5,1,1))
layout(matrix(c(1,1,2),nrow = 1, ncol=3))
modelpars = list(r = r, K = K)
plot_cobweb(modeloutput= output, modelpars, modelname = "logistic")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig2.1X.R', echo=TRUE)
fig2.1X(r = 1.8)
library(quantecol)
fig2.1X(r = 1.9)
fig2.1X(r = 2.1)
fig2.1X(r = 2.7)
fig2.1X(r = 0.6)
help("fig2.1X")
library(roxygen2)
library(quantecol)
print(plot_cobweb)
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig3.1.R', echo=TRUE)
library(quantecol)
fig3.1()
F3 <- 10
F4 <- 15
F5 <- 20
S1 <- 0.2
S2 <- 0.3
S3 <- 0.4
S4 <- 0.5
# Initial Conditions
N1.start <- 20
N2.start <- 15
N3.start <- 10
N4.start <- 5
N5.start <- 1
tmax <- 50
years <- 0:tmax
n.loop <- length(years)
output <- matrix (NA, nrow = length(years), ncol = 5)
colnames(output) <- c("Age 1", "Age 2", "Age 3", "Age 4", "Age 5")
output[1,]<- c(N1.start, N2.start, N3.start, N4.start, N5.start)
####################################################################
for (i in 2:n.loop){
output[i+1,1]<- output[i, 3] * F3 + output[i, 4] * F4 + output[i,5] * F5
output[i+1,2]<- output[i,1] * S1
output[i+1,3]<- output[i,2] * S2
output[i+1,4]<- output[i,3] * S3
output[i+1,5]<- output[i,4] * S4
}
n.loop
dim(output)
i
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig3.1.R', echo=TRUE)
fig3.1()
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig3.1.R', echo=TRUE)
fig3.1()
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig3.1.R', echo=TRUE)
fig3.1()
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig3.1.R', echo=TRUE)
fig3.1()
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig3.1.R', echo=TRUE)
fig3.1()
output <- fig3.1()
output
output$elasicity
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig3.1.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig3.1.R', echo=TRUE)
output <- fig3.1()
output$elasticity
output$stable_age_eigen
A <- matrix(0, nrow = 5, ncol = 5)
A[1,3:5] <- c(F3, F4, F5)
A[2,1] <- S1
A[3,2] <- S2
A[4,3] <- S3
A[5,4] <- S4
for (i in 2:n.loop){
output[i,] <- A %*% output[i-1,]
}
# calculate population growth rate using eigenvalue
ev <- eigen(A)
eigen.vals<- ev$values
eigen.vects <- ev$vectors
lambda_eig <- Re(eigen.vals[1])
w <- Re(eigen.vects[,1])
age.distribution_eig <- w / (sum(w))
# calculate elasticitiy
evl <- eigen(t(A))
v <- Re(evl$vectors[,1])
sp <- sum(v * w)
vi.wj <- v %o% w
e <-  A  / lambda * (vi.wj / sp)
e
lambda
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig3.1.R', echo=TRUE)
output <- fig3.1()
output$elasticity
library(quantecol)
help(roxygen2)
library(quantecol)
help("ode")
??ode
