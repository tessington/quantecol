source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
AIC.table
AIC.table[,3] <- AIC.table[,2] - min(AIC.table[,2])
AIC.table
pmf = "nbinom"
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
AIC.table
AIC.table[,1] <- c(di.fit$value,dd.fit$value)
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
AIC.table
di.fit$value
dd.fit
solve.ricker <- optim(par = start.par,
fn = fit.ricker.nb,
n.female = n.female,
n.offspring = n.offspring,
method = "Nelder-Mead")
di.fit <- solve.di
dd.fit <- solve.ricker
dd.fit
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
AIC.table
help(stop)
pmf <- tolower(pmf)
if(!pmf %in% c("poisson", "nbinom")) stop("function input 'pmf' must be either 'poisson' or 'nbinom'")
pmf = "blue)
if(!pmf %in% c("poisson", "nbinom")) stop("function input 'pmf' must be either 'poisson' or 'nbinom'")
(!pmf %in% c("poisson", "nbinom"))
(!pmf %in% c("poisson", "nbinom"))
pmf
pmf <- "blue")
(!pmf %in% c("poisson", "nbinom"))
pmf <- "blue"
(!pmf %in% c("poisson", "nbinom"))
if(!pmf %in% c("poisson", "nbinom")) stop("function input pmf must be either poisson or nbinom")
if(!pmf %in% c("poisson", "nbinom")) stop("function input 'pmf' must be either 'poisson' or 'nbinom'")
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
fit9.4()
fit9.4("nbinom")
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig9.4.R', echo=TRUE)
library(quantecol)
help(fig9.4)
help(fig9.4)
library(quantecol)
help(fig9.4)
fig8.5_6()
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig8.5_6.R', echo=TRUE)
fig8.5_6()
library(quantecol)
help(quantecol)
fig2.11()
fig2.11(r = 0.8)
fig2.11(r = 1.8)
fig2.11(r = 2.8)
library(quantecol)
print(fig5.8)
print(fig5.8())
fig5.8()
calcpi(print = T)
source('~/Dropbox/Desktop/Rcode/quantecol/R/calcpi.R', echo=TRUE)
calcpi(print = T)
source('~/Dropbox/Desktop/Rcode/quantecol/R/calcpi.R', echo=TRUE)
calcpi(print = T)
help(readlines)
help(readLines)
readLines(con = "txt/calcpi.tex")
readLines(con = "txt/calcpi.txt")
readLines(con = "txt/calcpi.txt")
cat(readLines(con = "txt/calcpi.txt"))
print(readLines(con = "txt/calcpi.txt"))
help(print)
help(print, quote = F)
print(readLines(con = "txt/calcpi.txt"), quote = F)
set.seed(521)
t1 <- round(abs(rt(200, df = 1.8)))
t2 <- round(abs(rt(200, df = 1.4)))
table(t1, t2) # simple
print(table(t1, t2), zero.print = ".") # nicer to read
help(print, quote = F, row.names = F)
help(print, quote = F, row.names = F)
print(readLines(con = "txt/calcpi.txt"), quote = F, row.names = F)
help(cat)
cat(readLines(con = "txt/calcpi.txt"), fill = TRUE)
cat(readLines(con = "txt/calcpi.txt"), fill = TRUE)
cat(readLines(con = "txt/calcpi.txt"), fill = F)
cat(readLines(con = "txt/calcpi.txt"), fill = F)
cat(readLines(con = "txt/calcpi.txt"), fill = F)
fun.text <- readLines(con = "txt/calcpi.txt")
cat(fun.text)
fun.text <- readLines(con = "txt/calcpi.txt", sep = "\n")
fun.text <- readLines(con = "txt/calcpi.txt", sep = "")
cat(fun.text, sep = "")
cat(fun.text, sep = "\n")
fun.text <- readLines(con = "txt/calcpi.txt")
cat(fun.text, sep = "\n")
calcpi <- function(n.iters = 100000, printfun = F) {
#' Monte carlo simulation to estimate pi.
#'
#'
#' Demonstration of example in 14.3.1 "What is pi".  This uses Monte Carlo simulation uses the ratio of randomly drawn points that are in a circle of radius r to a square with length r.
#'
#' @param n.iters the number of Monte Carlo iterations.  Must exceed 1000.
#'
#'
#' @return Monte Carlo based estimate of pi
#' @export
#'
#' @examples
#' # use a small number of iterations, likely get a poor estimate of pi
#' pi.est <- calcpi(n.iters = 1000)
#' # get a more robust estimate, but very slow
#' pi.est <- calcpi(n.iters = 10000000)
#'
#'
#'
if(n.iters<=1000) stop("n.iters should be greater than or equal to 1000")
in.circle <- function(x,y)  ifelse(sqrt(x^2+y^2)<= 1, 1, 0)
in.square <- function(x,y) ifelse(abs(x) <= 0.5 & abs(y) <= 0.5, 1, 0)
output <- matrix(NA, nrow = n.iters, ncol = 2)
for (i in 1:n.iters) {
x <- runif(n = 1, min = -1, max =1)
y <- runif(n = 1, min = -1, max =1)
output[i,1] <-in.circle(x,y)
output[i,2] <- in.square(x,y)
}
if(printfun) cat(readLines(con = "txt/calcpi.txt"), sep = "\n")
return(sum(output[,1]) / sum(output[,2]))
}
calcpi()
calcpi(printfun = T)
source('~/Dropbox/Desktop/Rcode/quantecol/R/calcpi.R', echo=TRUE)
library(quantecol)
source('~/Dropbox/Desktop/Rcode/quantecol/R/whaleModelSelect.R', echo=TRUE)
library(quantecol)
whaleModelSelect()
library(quantecol)
fig2.11(r = 0.1, viewcode = T)
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig2.11.R', echo=TRUE)
library(quantecol)
help(fig2.11)
library(quantecol)
fig2.2(viewcode = T)
fig2.2(viewcode = T)
fig2.2(viewcode = T)
fig2.2(viewcode = T)
library(quantecol)
fig2.3and4(viewcode = T)
library(quantecol)
fig2.3and4(viewcode = T)
fig2.5()
library(quantecol)
fig2.5()
library(quantecol)
fig2.5(viewcode = F)
fig2.5(viewcode = T)
help(fig2.5)
#' Generate figure 2.6 and 2.7, comparing standard compensatory model (logistic) with one that has depensatory population growth / Allee Effects
#'   #' @param viewcode TRUE or FALSE (default) indicating whether to print the function code
#' @export
#'
#' @examples
#' #view plotting commands
#' print(fig2.6and7)
#' # generate plot
#' fig2.6and7()
# code to compare compensatory vs. depensatory models
r <- 0.5
K <- 1000
A <- 200
log.function <- function(n, r, K) r* (1-n./K)
allee.function <- function(n, r, K,A) r*(1-n/K)*(n.list/K-A/K)
n.list <- 0:1000
logistic <-log.function(n.list, r, K)
allee <- allee.function(n.list, 1.5*r, K, A)
# reset graphic parameters to default
reset_graphics_par()
plot(n.list,
logistic,
type = "l",
lwd =3,
col = "gray50",
xlab = "Population Size",
ylab ="f(N)",
xlim = c(0, K),
ylim = c(-0.20, 0.5),
las = 1,
xaxs = "i",
yaxs = "i",
cex.axis = 1.25,
cex.lab = 1.25)
log.function <- function(n, r, K) r* (1-n./K)
allee.function <- function(n, r, K,A) r*(1-n/K)*(n.list/K-A/K)
n.list <- 0:1000
logistic <-log.function(n.list, r, K)
logistic <-log.function(n = n.list, r, K)
logistic <-log.function(n.list, r, K)
log.function <- function(n, r, K) r* (1-n/K)
allee.function <- function(n, r, K,A) r*(1-n/K)*(n.list/K-A/K)
n.list <- 0:1000
logistic <-log.function(n.list, r, K)
allee <- allee.function(n.list, 1.5*r, K, A)
# reset graphic parameters to default
reset_graphics_par()
plot(n.list,
logistic,
type = "l",
lwd =3,
col = "gray50",
xlab = "Population Size",
ylab ="f(N)",
xlim = c(0, K),
ylim = c(-0.20, 0.5),
las = 1,
xaxs = "i",
yaxs = "i",
cex.axis = 1.25,
cex.lab = 1.25)
lines(n.list,
allee,
lwd = 3,
col = "black")
abline (h = 0, lty = "dotted", col = "black", lwd =3, xpd = F)
n.list <- 0:1000
par(oma = c(0,2,0,0))
logistic <-n.list * log.function(n.list, r, K)
allee <- n.list * allee.function(n.list, 1.5*r, K, A)
plot(n.list,
logistic,
type = "l",
lwd =3,
col = "gray50",
xlab = "Population Size (N)",
ylab = "",
xlim = c(0, K),
ylim = c(-15, 130),
las = 1,
xaxs = "i",
yaxs = "i",
cex.axis = 1.25,
cex.lab = 1.25)
mtext(side = 2, text = expression(frac(paste(Delta, N), paste(Delta, t))), line = 3, las =0, cex = 1.5)
lines(n.list,
allee,
lwd = 3,
col = "black")
abline (h = 0, lty = "dotted", col = "black", lwd =3, xpd = F)
if(viewcode) cat(readLines(con = "txt/fig2.5.txt"), sep = "\n")
fig2.6and7 <- function(viewcode = F) {
#' Compare logistic to Allee effect model
#'
#' Generate figure 2.6 and 2.7, comparing standard compensatory model (logistic) with one that has depensatory population growth / Allee Effects
#'   #' @param viewcode TRUE or FALSE (default) indicating whether to print the function code
#' @export
#'
#' @examples
#' #view plotting commands
#' print(fig2.6and7)
#' # generate plot
#' fig2.6and7()
# code to compare compensatory vs. depensatory models
r <- 0.5
K <- 1000
A <- 200
log.function <- function(n, r, K) r* (1-n/K)
allee.function <- function(n, r, K,A) r*(1-n/K)*(n.list/K-A/K)
n.list <- 0:1000
logistic <-log.function(n.list, r, K)
allee <- allee.function(n.list, 1.5*r, K, A)
# reset graphic parameters to default
reset_graphics_par()
plot(n.list,
logistic,
type = "l",
lwd =3,
col = "gray50",
xlab = "Population Size",
ylab ="f(N)",
xlim = c(0, K),
ylim = c(-0.20, 0.5),
las = 1,
xaxs = "i",
yaxs = "i",
cex.axis = 1.25,
cex.lab = 1.25)
lines(n.list,
allee,
lwd = 3,
col = "black")
abline (h = 0, lty = "dotted", col = "black", lwd =3, xpd = F)
n.list <- 0:1000
par(oma = c(0,2,0,0))
logistic <-n.list * log.function(n.list, r, K)
allee <- n.list * allee.function(n.list, 1.5*r, K, A)
plot(n.list,
logistic,
type = "l",
lwd =3,
col = "gray50",
xlab = "Population Size (N)",
ylab = "",
xlim = c(0, K),
ylim = c(-15, 130),
las = 1,
xaxs = "i",
yaxs = "i",
cex.axis = 1.25,
cex.lab = 1.25)
mtext(side = 2, text = expression(frac(paste(Delta, N), paste(Delta, t))), line = 3, las =0, cex = 1.5)
lines(n.list,
allee,
lwd = 3,
col = "black")
abline (h = 0, lty = "dotted", col = "black", lwd =3, xpd = F)
if(viewcode) cat(readLines(con = "txt/fig2.5.txt"), sep = "\n")
}
library(quantecol)
help(fig2.6and7)
library(quantecol)
help(fig2.6and7)
library(quantecol)
help(fig3.1)
fig3.1(viewcode = T)
output <- fig4.1("unstable")
output$eigenvalue
help(list2env)
environment()
source('~/Dropbox/Desktop/Rcode/quantecol/R/fig4.1.R', echo=TRUE)
output <- fig4.1("unstable")
output
library(quantecol)
help(fig4.1)
library(quantecol)
library(quantecol)
fig5.2(viewcode = T)
help(fig5.2)
library(quantecol)
help(fig5.3)
fig5.3(viewcode = TRUE)
library(quantecol)
fig5.7(viewcode = T)
library(quantecol)
fig5.7(viewcode = T)
library(quantecol)
help(fig5.8)
fig5.8()
fig5.8(viewcode = T)
library(quantecol)
fig8.3(viewcode = T)
library(quantecol)
fig8.3(viewcode = F)
fig8.3(viewcode = T)
help(fig8.3)
print(fig8.3)
library(quantecol)
fig8.3(viewcode = T)
library(quantecol)
fig8.3(viewcode = T)
library(quantecol)
library(quantecol)
fig8.4(viewcode = T)
help(fig8.4)
library(quantecol)
fig8.5and6()
fig8.5and6(viewcode = T)
library(quantecol)
fig8.7(viewcode = TRUE)
library(quantecol)
fig8.8(viewcode = T)
library(quantecol)
fig8.8(viewcode = T)
fig8.8()
help(fig8.8)
library(quantecol)
help(fig9.4)
fig9.4(viewcode = T)
source('~/Dropbox/Desktop/Rcode/quantecol/R/killerWhaleExtinction.R', echo=TRUE)
killerWhaleExtinction("uncertainty")
source('~/Dropbox/Desktop/Rcode/quantecol/R/killerWhaleExtinction.R', echo=TRUE)
killerWhaleExtinction("uncertainty")
source('~/Dropbox/Desktop/Rcode/quantecol/R/killerWhaleExtinction.R', echo=TRUE)
killerWhaleExtinction("uncertainty")
source('~/Dropbox/Desktop/Rcode/quantecol/R/killerWhaleExtinction.R', echo=TRUE)
killerWhaleExtinction("uncertainty")
model.type = "uncertainty"
thedata <- killerwhales
year.list <- thedata[,1]
alive <- thedata[,2]
plot(year.list, alive,
type = "l",
lwd = 2,
xlab = "Year",
ylab = "Population Size",
las = 1)
points(year.list, alive,
pch = 21,
bg = "black")
# get r_t
rt <- log(alive[-1]/alive[-length(alive)])
mu <- mean(rt)
sigma <- sd(rt)
se <- sigma / (length(rt))^(.5)
plot(year.list[-length(year.list)], rt,
type = "l",
lwd = 2,
xlab = "Year",
ylab = expression(paste("r"["t"])),
las = 1)
points(year.list[-length(year.list)], rt,
pch = 21,
bg = "black")
# simulate model for a brief policy relevant time, 100 years
tmax.use <-  100
rho.est <- 0.23
rhat.use <- mu
no.use <- alive[length(alive)]
nextinct.use <- 40
sigma.use <- sigma
df <- length(rt) -1
run.stochastic <- function(pars) {
with(pars, {
extinct.flag <- 0
vt <- rnorm(tmax, mean = 0, sd = sigma)
nt <- no
eta<- rt <- nt <- rep(NA, tmax)
eta[1] <- vt[1]
nt[1] <- no
for (t in 2:tmax) eta[t] <- rho * eta[t-1] + vt[t] * sqrt(1- rho^2)
rt <- rbar + eta
for (t in 2:tmax)  {
nt[t] <- nt[t-1] * exp(rt[t-1])
if (nt[t] <= nextinct) break
}
if (nt[t] <= nextinct) extinct.flag <- 1
return(extinct.flag)
})
}
n.iters <- 10000
output <- rep(NA, n.iters)
# code to use if model.type is NOT "uncertainty"
if(!model.type == "uncertainty"){
if(model.type == "base") pars <- list(tmax = tmax.use, rho = 0, rbar = mu, sigma = sigma, no = no.use, nextinct = nextinct.use)
if(model.type == "autocorrelation") pars <- list(tmax = tmax.use, rho = rho.est, rbar = mu, sigma = sigma, no = no.use, nextinct = nextinct.use)
for (i in 1:n.iters)  output[i] <- run.stochastic(pars)
extinction <- sum(output) / n.iters
}
# code to use if model.type is "uncertainty"
if(model.type == "uncertainty") {
output <- rep(NA, n.iters)
rhat.2.use <- rnorm(n.iters, mu, se)
sigma.2.use <- sqrt(sigma^2*rchisq(n.iters, df = df)/df)
pars <- list(tmax = tmax.use, rho = 0, no= no.use, nextinct = nextinct.use)
for (i in 1:n.iters) {
pars$rbar <- rhat.2.use[i]
pars$sigma <- sigma.2.use[i]
output[i]<-run.stochastic(pars)
}
exinction = sum(output) / n.iters
}
source('~/Dropbox/Desktop/Rcode/quantecol/R/killerWhaleExtinction.R', echo=TRUE)
killerWhaleExtinction(model.type = "uncertainty")
library(quantecol)
killerWhaleExtinction(viewcode = T)
library(quantecol)
library(quantecol)
help(plotCobweb)
r <- 1.5
K <- 100
N0 <- 10
tmax <- 50
years <- 0:tmax
output <- rep(x = NA, times = length(years))
output[1] <- N0
n.loop <- length(years)
for (i in 2:n.loop) {
n.t <- output[i-1]
n.t.plus.1 <- n.t + r * n.t * (1 - n.t / K)
output[i] <- n.t.plus.1
}
plotCobweb(modeloutput = output, modelpars = list(r = r, K = K), modelname = "logistic")
r <- 1.5
K <- 100
N0 <- 10
tmax <- 50
years <- 0:tmax
output <- rep(x = NA, times = length(years))
output[1] <- N0
n.loop <- length(years)
for (i in 2:n.loop) {
n.t <- output[i-1]
n.t.plus.1 <- n.t + r * n.t * (1 - n.t / K)
output[i] <- n.t.plus.1
}
plotCobweb(modeloutput = output, modelpars = list(r = r, K = K), modelname = "logistic", viewcode = TRUE)
library(quantecol)
library(quantecol)
whaleModelSelect(viewcode = TRUE)
library(quantecol)
library(quantecol)
whaleModelSelect(viewcode = TRUE)
print(whaleModelSelect)
library(quantecol)
print(whaleModelSelect)
source('~/Dropbox/Desktop/Rcode/quantecol/R/whaleModelSelect.R', echo=TRUE)
print(whaleModelSelect)
help(whaleModelSelect)
library(quantecol)
plotProbDist(viewcode = T)
library(quantecol)
help(quantecol)
library(quantecol)
help(quantecol)
